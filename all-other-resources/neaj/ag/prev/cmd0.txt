select name from sys.databases;
go 

CREATE MASTER KEY ENCRYPTION BY PASSWORD = '12345aA@';
go 

CREATE CERTIFICATE Pod0_Cert
WITH SUBJECT = 'Pod0_Cert AG Certificate';
go

BACKUP CERTIFICATE Pod0_Cert
TO FILE = '/var/opt/mssql/data/Pod0_Cert.cer';
GO

CREATE ENDPOINT AGEP
STATE = STARTED
AS TCP (
    LISTENER_PORT = 5022,
    LISTENER_IP = ALL)
FOR DATABASE_MIRRORING (
    AUTHENTICATION = CERTIFICATE Pod0_Cert,
    ROLE = ALL);
GO


//run from terminal: 
➤ 
kubectl cp ag/mssql-0:/var/opt/mssql/data/Pod0_Cert.cer /home/neaj/Dropbox/OfficeLife/Projects/mssql/Pod0_Cert.cer
➤ 
kubectl cp /home/neaj/Dropbox/OfficeLife/Projects/mssql/Pod0_Cert.cer ag/mssql-1:/var/opt/mssql/data/Pod0_Cert.cer


sudo chown mssql:mssql Pod1_Cert.cer


CREATE LOGIN Pod1_Login WITH PASSWORD = '12345sS$';
CREATE USER Pod1_User FOR LOGIN Pod1_Login;
GO



CREATE CERTIFICATE Pod1_Cert
AUTHORIZATION Pod1_User
FROM FILE = '/var/opt/mssql/data/Pod1_Cert.cer';
GO

GRANT CONNECT ON ENDPOINT::AGEP TO Pod1_Login;
GO


USE [master]
GO
CREATE DATABASE SQLTestAG
GO
USE [SQLTestAG]
GO
CREATE TABLE Customers([CustomerID] int NOT NULL, [CustomerName] varchar(30) NOT NULL)
GO

INSERT INTO Customers (CustomerID, CustomerName) 
VALUES (30,'Petstore CO'),
       (90,'adatum corp'),
       (130,'adventureworks');
GO 

-- Change DB recovery model to Full and take full backup
ALTER DATABASE [SQLTestAG] SET RECOVERY FULL ;
GO
BACKUP DATABASE [SQLTestAG] TO  DISK = N'/var/opt/mssql/backup/SQLTestAG.bak' WITH NOFORMAT, NOINIT,  NAME = N'SQLTestAG-Full Database Backup', SKIP, NOREWIND, NOUNLOAD,  STATS = 10
GO
USE [master]
GO





CREATE AVAILABILITY GROUP [SqlServerAG]
WITH (
   CLUSTER_TYPE = EXTERNAL
)
FOR DATABASE SQLTestAG
REPLICA ON N'mssql-0'
WITH (
   ENDPOINT_URL = N'ag/msqql-0:5022',
   FAILOVER_MODE = MANUAL,
   AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
   PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE),
   SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)
),
N'mssql-1' WITH (
   ENDPOINT_URL = N'ag/mssql-1:5022',
   FAILOVER_MODE = MANUAL,
   SEEDING_MODE = AUTOMATIC,
   AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
   PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE),
   SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)
);
GO




















extra info: 

CREATE AVAILABILITY GROUP [SqlServerAG]
WITH (
   CLUSTER_TYPE = EXTERNAL
)
FOR DATABASE SQLTestAG
REPLICA ON N'mssql-0'
WITH (
   ENDPOINT_URL = N'ag/msqql-0:5022',
   FAILOVER_MODE = MANUAL,
   AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
   PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE),
   SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)
N'mssql-1' WITH (
   ENDPOINT_URL = N'ag/mssql-1:5022',
   FAILOVER_MODE = MANUAL,
   SEEDING_MODE = AUTOMATIC,
   AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
   PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE),
   SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)
GO





CREATE AVAILABILITY GROUP [FirstAG]
WITH (
   CLUSTER_TYPE = EXTERNAL
)
FOR DATABASE agDB
REPLICA ON N'mssql-0'
WITH (
   ENDPOINT_URL = N'ag/msqql-0:5022',
   FAILOVER_MODE = EXTERNAL,
   AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
   SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)
N'AGP1' WITH (
   ENDPOINT_URL = N'ag/mssql-1:5022',
   FAILOVER_MODE = EXTERNAL,
   SEEDING_MODE = AUTOMATIC,
   AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
   SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL)
GO







CREATE AVAILABILITY GROUP myAG
WITH (CLUSTER_TYPE = EXTERNAL)
FOR DATABASE agDB
REPLICA ON N'AGP0'
WITH (
   ENDPOINT_URL = N'tcp://demo/msqql-0:5022',
   FAILOVER_MODE = EXTERNAL,
   AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
   PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE, READ_ONLY_ROUTING_LIST = (('demo/msqql-1'))),
   SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL, READ_ONLY_ROUTING_URL = N'demo/msqql-0:1433')),
N'AGP1' WITH (
   ENDPOINT_URL = N'tcp://demo/mssql-1:5022',
   FAILOVER_MODE = EXTERNAL,
   SEEDING_MODE = AUTOMATIC,
   AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
   PRIMARY_ROLE (ALLOW_CONNECTIONS = READ_WRITE, READ_ONLY_ROUTING_LIST = (('demo/msqql-0'))),
   SECONDARY_ROLE (ALLOW_CONNECTIONS = ALL, READ_ONLY_ROUTING_URL = N'demo/msqql-1:1433'))

GO
